/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.postgres.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.postgres.Keys;
import org.jooq.mcve.java.postgres.Mcve;
import org.jooq.mcve.java.postgres.tables.records.PhotosRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Photos extends TableImpl<PhotosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.photos</code>
     */
    public static final Photos PHOTOS = new Photos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhotosRecord> getRecordType() {
        return PhotosRecord.class;
    }

    /**
     * The column <code>mcve.photos.id</code>.
     */
    public final TableField<PhotosRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mcve.photos.created_at</code>.
     */
    public final TableField<PhotosRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("(now() AT TIME ZONE 'utc'::text)"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mcve.photos.updated_at</code>.
     */
    public final TableField<PhotosRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("(now() AT TIME ZONE 'utc'::text)"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mcve.photos.product_id</code>.
     */
    public final TableField<PhotosRecord, String> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>mcve.photos.broadcast_type</code>.
     */
    public final TableField<PhotosRecord, String> BROADCAST_TYPE = createField(DSL.name("broadcast_type"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'NONE'::text"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>mcve.photos.broadcast_order</code>.
     */
    public final TableField<PhotosRecord, Integer> BROADCAST_ORDER = createField(DSL.name("broadcast_order"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private Photos(Name alias, Table<PhotosRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Photos(Name alias, Table<PhotosRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>mcve.photos</code> table reference
     */
    public Photos(String alias) {
        this(DSL.name(alias), PHOTOS);
    }

    /**
     * Create an aliased <code>mcve.photos</code> table reference
     */
    public Photos(Name alias) {
        this(alias, PHOTOS);
    }

    /**
     * Create a <code>mcve.photos</code> table reference
     */
    public Photos() {
        this(DSL.name("photos"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public UniqueKey<PhotosRecord> getPrimaryKey() {
        return Keys.PK_PHOTOS;
    }

    @Override
    public Photos as(String alias) {
        return new Photos(DSL.name(alias), this);
    }

    @Override
    public Photos as(Name alias) {
        return new Photos(alias, this);
    }

    @Override
    public Photos as(Table<?> alias) {
        return new Photos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Photos rename(String name) {
        return new Photos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Photos rename(Name name) {
        return new Photos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Photos rename(Table<?> name) {
        return new Photos(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Photos where(Condition condition) {
        return new Photos(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Photos where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Photos where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Photos where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Photos where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Photos where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Photos where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Photos where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Photos whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Photos whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
